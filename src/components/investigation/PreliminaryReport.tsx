// src/components/investigation/PreliminaryReport.tsx

import React, { useState, useEffect } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';
import * as Yup from 'yup';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useCurrentUser } from '@/lib/hooks/useCurrentUser';
import { savePreliminaryReport } from '@/lib/services/investigationService';

// Esquema de validación para el informe preliminar
const PreliminaryReportSchema = Yup.object().shape({
  summary: Yup.string()
    .min(50, 'El resumen debe tener al menos 50 caracteres')
    .required('El resumen es obligatorio'),
  safetyMeasures: Yup.string()
    .min(50, 'Las medidas de resguardo deben tener al menos 50 caracteres')
    .required('Las medidas de resguardo son obligatorias'),
  initialAssessment: Yup.string()
    .min(50, 'La evaluación inicial debe tener al menos 50 caracteres')
    .required('La evaluación inicial es obligatoria'),
  nextSteps: Yup.string()
    .min(50, 'Los próximos pasos deben tener al menos 50 caracteres')
    .required('Los próximos pasos son obligatorios'),
});

interface PreliminaryReportProps {
  reportId: string;
  reportData: any; // Datos de la denuncia
  preliminaryReport: any;
  isKarinLaw: boolean;
  canEdit: boolean;
  onReportUpdated: (report: any) => void;
}

export const PreliminaryReport: React.FC<PreliminaryReportProps> = ({
  reportId,
  reportData,
  preliminaryReport,
  isKarinLaw,
  canEdit,
  onReportUpdated,
}) => {
  const { uid } = useCurrentUser();
  const [isEditing, setIsEditing] = useState(!preliminaryReport);
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [autoGenerated, setAutoGenerated] = useState(false);
  
  // Generar automáticamente el informe preliminar basado en los datos de la denuncia
  const generatePreliminaryReport = () => {
    if (!reportData) return null;
    
    // Extraer información del denunciante
    const complainantInfo = reportData.complainant ? 
      `La denuncia fue presentada por ${reportData.complainant.name || 'un denunciante'} ${
        reportData.anonymous ? '(de forma anónima)' : `(${reportData.complainant.position || 'sin posición especificada'})`
      }.` : 
      'La denuncia fue presentada de forma anónima.';
    
    // Extraer información sobre el denunciado
    const accusedInfo = reportData.accused && reportData.accused.length > 0 ? 
      `La denuncia se presenta contra ${reportData.accused.map(a => a.name).join(', ')}, 
      quien${reportData.accused.length > 1 ? 'es ocupan' : ' ocupa'} el cargo de ${
        reportData.accused.map(a => a.position).join(', ')
      }.` : 
      'No se ha especificado claramente quién es la persona denunciada.';
    
    // Información sobre testigos
    const witnessesInfo = reportData.witnesses && reportData.witnesses.length > 0 ? 
      `Se han identificado ${reportData.witnesses.length} testigos que podrían aportar información relevante.` : 
      'No se han identificado testigos en esta etapa inicial.';
    
    // Tipo de denuncia y hechos
    const incidentType = reportData.category || 'sin categoría especificada';
    const incidentDate = reportData.incidentDate ? `ocurrido el ${new Date(reportData.incidentDate).toLocaleDateString('es-CL')}` : 'sin fecha específica';
    const incidentPlace = reportData.incidentPlace || 'no especificado';
    
    // Resumen generado
    const summary = `
Informe preliminar sobre denuncia por ${incidentType} ${incidentDate} en ${incidentPlace}.

${complainantInfo}

${accusedInfo}

${witnessesInfo}

Los hechos denunciados se refieren a: ${reportData.description || 'No hay descripción detallada disponible'}.
    `;
    
    // Medidas de resguardo sugeridas
    let safetyMeasures = '';
    if (isKarinLaw) {
      safetyMeasures = `
Considerando que se trata de un caso bajo la Ley Karin (acoso laboral/sexual), se recomiendan las siguientes medidas de resguardo:

1. Separación inmediata del denunciante y denunciado en sus funciones laborales, asegurando que no tengan contacto directo.
2. Asignación temporal de tareas en áreas físicamente separadas.
3. Designación de un acompañante o persona de confianza para el denunciante.
4. Ajuste temporal de horarios para evitar coincidencias.
5. Prohibición de comunicación directa entre las partes involucradas.
6. Supervisión directa por parte de un superior en caso de actividades que requieran la presencia de ambas partes.
      `;
    } else {
      safetyMeasures = `
Se sugieren las siguientes medidas de resguardo según la naturaleza de la denuncia:

1. Mantener la confidencialidad estricta del caso y de los involucrados.
2. Asegurar que no exista contacto innecesario entre denunciante y denunciado durante la investigación.
3. Informar a las partes sobre la prohibición de represalias.
4. Documentar cualquier interacción relacionada con el caso.
      `;
    }
    
    // Evaluación inicial
    const initialAssessment = `
Basado en la información recibida, se realiza la siguiente evaluación preliminar:

- Tipo de denuncia: ${incidentType} (${isKarinLaw ? 'Caso Ley Karin' : 'Caso regular'})
- Gravedad aparente: ${reportData.gravity || 'Por determinar'}
- Existencia de testigos: ${reportData.witnesses && reportData.witnesses.length > 0 ? 'Sí' : 'No identificados inicialmente'}
- Evidencia disponible: ${reportData.evidence ? 'Documentación aportada por el denunciante' : 'Sin evidencia inicial aportada'}

Esta denuncia ${isKarinLaw ? 'requiere atención prioritaria por tratarse de un caso Ley Karin' : 'será tratada según el procedimiento estándar'}.
    `;
    
    // Próximos pasos
    const nextSteps = isKarinLaw ? `
De acuerdo con la Ley Karin, se procederá con los siguientes pasos:

1. Notificación a la Dirección del Trabajo dentro del plazo legal (3 días hábiles administrativos).
2. Programación inmediata de entrevistas con el denunciante y denunciado.
3. Recopilación de testimonios de los testigos identificados.
4. Revisión de evidencias documentales y registros disponibles.
5. Elaboración del informe de investigación final dentro del plazo establecido.

Todos los plazos serán controlados con estricto apego a la normativa para evitar vencimientos.
    ` : `
Se llevarán a cabo las siguientes acciones como parte de la investigación:

1. Entrevistas a todas las partes involucradas.
2. Recopilación de evidencias documentales y testimoniales.
3. Análisis de las políticas internas aplicables al caso.
4. Elaboración de un informe de hallazgos.
5. Presentación de conclusiones y recomendaciones.
    `;
    
    return {
      summary: summary.trim(),
      safetyMeasures: safetyMeasures.trim(),
      initialAssessment: initialAssessment.trim(),
      nextSteps: nextSteps.trim(),
    };
  };
  
  // Preparar valores iniciales
  const generatedReport = generatePreliminaryReport();
  const initialValues = preliminaryReport ? {
    summary: preliminaryReport.summary || '',
    safetyMeasures: preliminaryReport.safetyMeasures || '',
    initialAssessment: preliminaryReport.initialAssessment || '',
    nextSteps: preliminaryReport.nextSteps || '',
  } : generatedReport || {
    summary: '',
    safetyMeasures: '',
    initialAssessment: '',
    nextSteps: '',
  };
  
  // Efecto para marcar el reporte como autogenerado
  useEffect(() => {
    if (!preliminaryReport && !autoGenerated && generatedReport) {
      setAutoGenerated(true);
    }
  }, [preliminaryReport, autoGenerated]);
  
  // Manejar el envío del formulario
  const handleSubmit = async (values: any) => {
    if (!uid) return;
    
    setIsSubmitting(true);
    setError(null);
    
    try {
      const companyId = 'default'; // En un sistema multi-tenant, esto vendría de un contexto o URL
      
      const result = await savePreliminaryReport(
        companyId,
        reportId,
        uid,
        values
      );
      
      if (result.success) {
        // Actualizar el informe local
        const updatedReport = {
          ...values,
          type: 'preliminaryReport',
          createdBy: uid,
          createdAt: new Date(),
          updatedAt: new Date(),
        };
        
        onReportUpdated(updatedReport);
        setIsEditing(false);
      } else {
        setError(result.error || 'Error al guardar el informe preliminar');
      }
    } catch (error) {
      console.error('Error al guardar el informe:', error);
      setError('Ha ocurrido un error al guardar el informe preliminar');
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Formatear fechas
  const formatDate = (date: any) => {
    if (!date) return 'N/A';
    
    const dateObj = date.toDate ? new Date(date.toDate()) : new Date(date);
    
    return new Intl.DateTimeFormat('es-CL', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    }).format(dateObj);
  };
  
  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Informe Preliminar</CardTitle>
          <CardDescription>
            {preliminaryReport 
              ? `Informe creado el ${formatDate(preliminaryReport.createdAt)}` 
              : 'Informe preliminar generado automáticamente con los datos de la denuncia'
            }
            {isKarinLaw && (
              <span className="block mt-1 text-red-600">
                Caso Ley Karin - Este informe es necesario para enviar a la Dirección del Trabajo dentro de los 3 días hábiles administrativos
              </span>
            )}
          </CardDescription>
        </CardHeader>
        <CardContent>
          {autoGenerated && !preliminaryReport && (
            <Alert className="mb-6 bg-yellow-50 border-yellow-200">
              <AlertDescription>
                <p className="text-yellow-800">
                  <span className="font-medium">Informe autogenerado:</span> Se ha creado automáticamente un informe preliminar 
                  basado en los datos de la denuncia. Revise y modifique la información según sea necesario antes de guardar.
                </p>
              </AlertDescription>
            </Alert>
          )}
          
          {isEditing ? (
            <Formik
              initialValues={initialValues}
              validationSchema={PreliminaryReportSchema}
              onSubmit={handleSubmit}
            >
              {({ errors, touched }) => (
                <Form className="space-y-4">
                  {/* Resumen del caso */}
                  <div>
                    <Label htmlFor="summary" required>
                      Resumen del Caso
                    </Label>
                    <Field
                      as={Textarea}
                      id="summary"
                      name="summary"
                      rows={5}
                      placeholder="Descripción del caso, partes involucradas y hechos denunciados..."
                      className={`mt-1 ${touched.summary && errors.summary ? 'border-error' : ''}`}
                    />
                    <ErrorMessage name="summary">
                      {(msg) => <div className="text-error text-sm mt-1">{msg}</div>}
                    </ErrorMessage>
                  </div>
                  
                  {/* Medidas de resguardo */}
                  <div>
                    <Label htmlFor="safetyMeasures" required>
                      Medidas de Resguardo
                    </Label>
                    <Field
                      as={Textarea}
                      id="safetyMeasures"
                      name="safetyMeasures"
                      rows={4}
                      placeholder="Medidas adoptadas para proteger a los involucrados durante la investigación..."
                      className={`mt-1 ${touched.safetyMeasures && errors.safetyMeasures ? 'border-error' : ''}`}
                    />
                    <ErrorMessage name="safetyMeasures">
                      {(msg) => <div className="text-error text-sm mt-1">{msg}</div>}
                    </ErrorMessage>
                  </div>
                  
                  {/* Evaluación inicial */}
                  <div>
                    <Label htmlFor="initialAssessment" required>
                      Evaluación Inicial
                    </Label>
                    <Field
                      as={Textarea}
                      id="initialAssessment"
                      name="initialAssessment"
                      rows={4}
                      placeholder="Evaluación preliminar del caso, gravedad aparente y consideraciones iniciales..."
                      className={`mt-1 ${touched.initialAssessment && errors.initialAssessment ? 'border-error' : ''}`}
                    />
                    <ErrorMessage name="initialAssessment">
                      {(msg) => <div className="text-error text-sm mt-1">{msg}</div>}
                    </ErrorMessage>
                  </div>
                  
                  {/* Próximos pasos */}
                  <div>
                    <Label htmlFor="nextSteps" required>
                      Próximos Pasos
                    </Label>
                    <Field
                      as={Textarea}
                      id="nextSteps"
                      name="nextSteps"
                      rows={4}
                      placeholder="Acciones a seguir en la investigación, plazos y responsables..."
                      className={`mt-1 ${touched.nextSteps && errors.nextSteps ? 'border-error' : ''}`}
                    />
                    <ErrorMessage name="nextSteps">
                      {(msg) => <div className="text-error text-sm mt-1">{msg}</div>}
                    </ErrorMessage>
                  </div>
                  
                  {error && (
                    <Alert variant="error">
                      <AlertDescription>{error}</AlertDescription>
                    </Alert>
                  )}
                  
                  <div className="flex justify-end space-x-2 pt-4">
                    {preliminaryReport && (
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() => setIsEditing(false)}
                        disabled={isSubmitting}
                      >
                        Cancelar
                      </Button>
                    )}
                    <Button 
                      type="submit"
                      disabled={isSubmitting}
                    >
                      {isSubmitting ? 'Guardando...' : preliminaryReport ? 'Actualizar Informe' : 'Guardar Informe'}
                    </Button>
                  </div>
                </Form>
              )}
            </Formik>
          ) : (
            <div className="space-y-6">
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">Resumen del Caso</h3>
                <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                  <p className="text-sm text-gray-800 whitespace-pre-line">{preliminaryReport.summary}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">Medidas de Resguardo</h3>
                <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                  <p className="text-sm text-gray-800 whitespace-pre-line">{preliminaryReport.safetyMeasures}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">Evaluación Inicial</h3>
                <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                  <p className="text-sm text-gray-800 whitespace-pre-line">{preliminaryReport.initialAssessment}</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-sm font-medium text-gray-700 mb-2">Próximos Pasos</h3>
                <div className="bg-gray-50 p-4 rounded-md border border-gray-200">
                  <p className="text-sm text-gray-800 whitespace-pre-line">{preliminaryReport.nextSteps}</p>
                </div>
              </div>
              
              {canEdit && (
                <div className="flex justify-end">
                  <Button 
                    onClick={() => setIsEditing(true)}
                    variant="outline"
                  >
                    Editar Informe
                  </Button>
                </div>
              )}
            </div>
          )}
        </CardContent>
      </Card>
      
      {isKarinLaw && !preliminaryReport && (
        <Card>
          <CardContent className="p-6">
            <div className="flex items-start">
              <div className="flex-shrink-0 h-10 w-10 rounded-full bg-red-100 flex items-center justify-center">
                <svg 
                  xmlns="http://www.w3.org/2000/svg" 
                  className="h-6 w-6 text-red-600" 
                  fill="none" 
                  viewBox="0 0 24 24" 
                  stroke="currentColor"
                >
                  <path 
                    strokeLinecap="round" 
                    strokeLinejoin="round" 
                    strokeWidth={2} 
                    d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" 
                  />
                </svg>
              </div>
              <div className="ml-4">
                <h3 className="text-lg font-medium text-red-900">
                  Informe Preliminar Pendiente - Caso Ley Karin
                </h3>
                <p className="mt-1 text-sm text-red-600">
                  Según la Ley Karin, este informe debe ser enviado a la Dirección del Trabajo 
                  dentro de los 3 días hábiles administrativos posteriores a la validación de la denuncia.
                  Se ha generado automáticamente un borrador que puede revisar y guardar.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};